<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Book Appointment - SwasthaSetu</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");

    body {
      font-family: "Inter", sans-serif;
    }

    .time-slot {
      transition: all 0.3s ease;
    }

    .time-slot:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
    }

    .time-slot.selected {
      background: linear-gradient(135deg, #3b82f6, #1d4ed8);
      color: white;
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    }

    .time-slot.booked {
      background: #f3f4f6;
      color: #9ca3af;
      cursor: not-allowed;
    }

    .doctor-card {
      background: linear-gradient(135deg, #667eea 0%, #10a47f 100%);
    }

    .info-card {
      backdrop-filter: blur(10px);
      background: rgba(255, 255, 255, 0.95);
    }
  </style>
</head>

<body class="bg-gradient-to-br from-blue-50 via-white to-teal-50 min-h-screen">
  <nav class="bg-white border-b border-gray-600 shadow-lg fixed w-full top-0 z-50 transition-colors duration-300">
    <div class="max-w-7xl mx-auto px-4">
      <div class="flex justify-between items-center py-4">
        <div class="flex items-center">
          <div onclick="location.href='/'" class="bg-teal-500 text-white p-2 rounded-md mr-3 w-10 h-10">
            <script src="https://cdn.lordicon.com/lordicon.js"></script>
            <lord-icon src="https://cdn.lordicon.com/nvsfzbop.json" trigger="loop" stroke="bold"
              colors="primary:#2563EB,secondary:#ffffff" style="width: 100%; height: 100%">
            </lord-icon>
          </div>
          <div class="flex">
            <h1 class="text-2xl font-bold text-gray-900 dark:text-blue-600">
              Swastha
              <h1 class="text-2xl font-bold text-teal-300">Setu</h1>
            </h1>
          </div>
        </div>
        <div id="mobileMenu"
          class="hidden w-full backdrop-blur-[10px] border border-gray-800 bg-gray-950/10 shadow-lg fixed top-0 right-0 flex flex-col pl-4 items-start min-h-screen md:w-1/2 justify-start pt-6 transition all ease-in-out duration-500">
          <svg onclick="closeSB()" id="close" class="w-6 h-6 text-2xl p-0 mb-4 text-white" fill="currentColor"
            viewBox="0 0 24 24">
            <path fill-rule="evenodd"
              d="M9.528 1.718a.75.75 0 0 1 .162.819A8.97 8.97 0 0 0 9 6a9 9 0 0 0 9 9 8.97 8.97 0 0 0 3.463-.69.75.75 0 0 1 .981.98 10.503 10.503 0 0 1-9.694 6.46c-5.799 0-10.5-4.7-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 0 1 .818.162Z"
              clip-rule="evenodd" />
          </svg>
          <a href="/" class="text-gray-100 hover:text-blue-600 text-3xl transition-colors">Home</a>
          <a href="/user/book"
            class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-500 text-3xl transition-colors">Clinics</a>
          <a href="/#about"
            class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-teal-400 text-3xl transition-colors">About</a>
          <a href="/#contact"
            class="text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-teal-400 text-3xl transition-colors">Contact</a>
          <script>
            const mobileMenu = document.querySelector("#mobileMenu");
            function showMenu() {
              mobileMenu.classList.remove("hidden");
            }
            function closeSB() {
              mobileMenu.classList.add("hidden");
            }

            // document.addEventListener('click', function(e) {
            //     if (!mobileMenu.contains(e.target)) {
            //         closeSB();
            //     }
            // });
          </script>
        </div>
        <div class="hidden md:flex items-center space-x-8">
          <a href="/"
            class="text-gray-900 hover:text-blue-600 dark:hover:text-blue-500 font-medium transition-colors">Home</a>
          
          <a href="/users/book"
            class="text-gray-900 hover:text-blue-600 dark:hover:text-blue-500 font-medium transition-colors">Clinics</a>
          <a href="/#about"
            class="text-gray-900 hover:text-blue-600 dark:hover:text-teal-400 font-medium transition-colors">About</a>
          <a href="/#contact"
            class="text-gray-900 hover:text-blue-600 dark:hover:text-teal-400 font-medium transition-colors">Contact</a>
        </div>
        <div class="hidden md:flex items-center ">

          <!-- Profile Dropdown -->
          <div class="relative">
            <button id="profileDropdown"
              class="flex items-center space-x-2 bg-gray-200  hover:bg-gray-700 hover:text-gray-200 text-gray-700  p-2 rounded-lg transition-colors">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
              </svg>
            </button>
            <div id="profileMenu"
              class="hidden absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50">
              <div class="py-2">
                
                <a href="/users/dashboard"
                  class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                  <svg class="w-4 h-4 mr-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd"
                      d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z"
                      clip-rule="evenodd" />
                  </svg>
                  My Profile
                </a>
                <a href="/api/book-appointment/<%= doctorId %>"
                  class="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors">
                  <svg class="w-4 h-4 mr-3" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
                    <path fill-rule="evenodd"
                      d="M4 5a2 2 0 012-2v1a2 2 0 002 2h8a2 2 0 002-2V3a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3z"
                      clip-rule="evenodd" />
                  </svg>
                  My Appointments
                </a>
              </div>
            </div>
          </div>
        </div>
        <div class="md:hidden">
          <button onclick="showMenu()" id="mobileMenuBtn" class="text-gray-600 dark:text-gray-300">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </nav>
  <div class="container mx-auto px-4 pt-24 pb-8 max-w-7xl">
    <div class="grid lg:grid-cols-3 gap-8">
      <!-- Doctor Information Card -->
      <div class="lg:col-span-1">
        <div class="doctor-card rounded-2xl p-8 text-white shadow-2xl">
          <!-- Doctor Image -->
          <div class="text-center mb-6">
            <div
              class="w-48 h-48 mx-auto rounded-full border border-white bg-white shadow-lg overflow-hidden overflow-y-hidden">
              <img src="<%= doctor.profilePicture %>" alt="" class="size-auto rounded-full" srcset="" />
            </div>
          </div>

          <!-- Doctor Details -->
          <div class="text-center">
            <h2 class="text-2xl font-bold mb-2">Dr. <%= doctor.name %></h2>
            <p class="text-blue-100 mb-4"><%= doctor.speciality %></p>
          </div>
        </div>

        <!-- Detailed Information -->
        <div class="info-card rounded-2xl p-6 mt-6 shadow-xl">
          <h3 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
              <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            Professional Details
          </h3>

          <div class="space-y-4">
            <div class="flex items-start">
              <svg class="w-5 h-5 mr-3 mt-0.5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path
                  d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z" />
              </svg>
              <div>
                <p class="font-medium text-gray-800">Qualification</p>
                <p class="text-gray-600 text-sm">
                  <%= doctor.qualification %>
                </p>
              </div>
            </div>

            <div class="flex items-start">
              <svg class="w-5 h-5 mr-3 mt-0.5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd"
                  d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                  clip-rule="evenodd" />
              </svg>
              <div>
                <p class="font-medium text-gray-800">Clinic</p>
                <p class="text-gray-600 text-sm">
                  <%= clinic.name %><br /><%= clinic.location %>
                </p>
              </div>
            </div>

            <div class="flex items-start">
              <svg class="w-5 h-5 mr-3 mt-0.5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                  clip-rule="evenodd" />
              </svg>
              <div>
                <p class="font-medium text-gray-800">Experience</p>
                <p class="text-gray-600 text-sm">
                  <%= doctor.experience %> Years
                </p>
              </div>
            </div>

            <div class="flex items-start">
              <svg class="w-5 h-5 mr-3 mt-0.5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd"
                  d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                  clip-rule="evenodd" />
              </svg>
              <div>
                <p class="font-medium text-gray-800">Working Hours</p>
                <p class="text-gray-600 text-sm">
                  <%= doctor.workingHours %>
                </p>
              </div>
            </div>

            <div class="flex items-start">
              <svg class="w-5 h-5 mr-3 mt-0.5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path
                  d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
              </svg>
              <div>
                <p class="font-medium text-gray-800">Contact</p>
                <p class="text-gray-600 text-sm">
                  📞 <%= doctor.phone %><br />✉️ <%= doctor.email %>
                </p>
              </div>
            </div>
          </div>

          <!-- Specializations -->
          <div class="mt-6 pt-6 border-t border-gray-200">
            <h4 class="font-semibold text-gray-800 mb-3">Specializations</h4>
            <div class="flex flex-wrap gap-2">
              <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium"><%= doctor.speciality %></span>
            </div>
          </div>
        </div>
      </div>

      <!-- Appointment Booking Section -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-2xl shadow-xl p-8">
          <h3 class="text-2xl font-bold text-gray-800 mb-6">
            Select Appointment Time
          </h3>

          <!-- Date Selection -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-700 mb-4">
              Choose Date
            </h4>
            <div class="grid grid-cols-4 gap-2 md:grid-cols-7 gap-2" id="dateGrid">
              <!-- Dates will be populated by JavaScript -->
            </div>
          </div>

          <!-- Time Slots -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-700 mb-4">
              Available Time Slots
            </h4>
            <div class="grid grid-cols-3 md:grid-cols-4 gap-3" id="timeSlots">
              <!-- Time slots will be populated by JavaScript -->
            </div>
          </div>

          <!-- Selected Appointment Summary -->
          <div id="appointmentSummary" class="hidden bg-gradient-to-r from-green-50 to-blue-50 rounded-xl p-6 mb-6">
            <h4 class="text-lg font-semibold text-gray-800 mb-3">
              Appointment Summary
            </h4>
            <div class="space-y-2">
              <p>
                <span class="font-medium">Doctor:</span> Dr. <%= doctor.name %>
              </p>
              <p>
                <span class="font-medium">Date:</span>
                <span id="selectedDate"></span>
              </p>
              <p>
                <span class="font-medium">Time:</span>
                <span id="selectedTime"></span>
              </p>
              <p><span class="font-medium">Duration:</span> 30 minutes</p>
              <p><span class="font-medium">Consultation Fee:</span> ₹150</p>
            </div>
          </div>

          <!-- Book Appointment Button -->
          <button id="bookButton"
            class="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-4 px-6 rounded-xl hover:from-blue-700 hover:to-purple-700 transform hover:scale-105 transition-all duration-300 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
            disabled>
            Book Appointment
          </button>

          <!-- Success Message -->
          <div id="successMessage"
            class="hidden mt-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-xl">
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                  clip-rule="evenodd" />
              </svg>
              <strong>Appointment Booked Successfully!</strong>
            </div>
            <p class="mt-2">
              You will receive a confirmation email shortly. Please arrive 15
              minutes early for your appointment.
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>

    const doctorId = "<%= doctorId %>";
    const userId = "<%= userId %>";

    let selectedDate = null;
    let selectedTime = null;
    let selectedDateKey = null;
    const bookedSlotsByDate = {};


    async function fetchBookedSlots(dateKey) {
  const res = await fetch(`/api/booked-slots?date=${encodeURIComponent(dateKey)}&doctorId=${doctorId}`);
  const booked = await res.json();
  bookedSlotsByDate[dateKey] = booked;
  generateTimeSlots(dateKey);

  
}


    

    // Generate dates for the next 14 days
    function generateDates() {
      const dateGrid = document.getElementById("dateGrid");
      const today = new Date();

      for (let i = 0; i < 21; i++) {
        const date = new Date(today);
        date.setDate(today.getDate() + i);

        const dateButton = document.createElement("button");
        dateButton.className =
          "p-3 text-center border border-gray-200 rounded-lg hover:bg-blue-50 hover:border-blue-300 transition-all duration-200";
        dateButton.innerHTML = `
                    <div class="text-xs text-gray-500 uppercase">${date.toLocaleDateString(
          "en-US",
          { weekday: "short" }
        )}</div>
                    <div class="text-lg font-semibold text-gray-800">${date.getDate()}</div>
                    <div class="text-xs text-gray-500">${date.toLocaleDateString(
          "en-US",
          { month: "short" }
        )}</div>
                `;

        dateButton.addEventListener("click", () =>
          selectDate(date, dateButton)
        );
        dateGrid.appendChild(dateButton);
      }
    }

    // Convert time string to minutes for comparison
    function timeToMinutes(timeStr) {
      const [time, period] = timeStr.split(" ");
      let [hours, minutes] = time.split(":").map(Number);

      if (period === "PM" && hours !== 12) {
        hours += 12;
      } else if (period === "AM" && hours === 12) {
        hours = 0;
      }

      return hours * 60 + minutes;
    }

    // Generate time slots based on selected date
    function generateTimeSlots(dateKey = null) {
      const timeSlots = document.getElementById("timeSlots");
      timeSlots.innerHTML = ""; // Clear existing slots

      const slots = [
        "9:00 AM",
        "9:30 AM",
        "10:00 AM",
        "10:30 AM",
        "11:00 AM",
        "11:30 AM",
        "2:00 PM",
        "2:30 PM",
        "3:00 PM",
        "3:30 PM",
        "4:00 PM",
        "4:30 PM",
        "5:00 PM",
        "5:30 PM",
      ];

      // Get booked slots for the selected date
      const bookedSlots = dateKey ? bookedSlotsByDate[dateKey] || [] : [];

      // Check if selected date is today
      const today = new Date();
      const isToday = dateKey === today.toDateString();

      // Get current time in minutes + 30 minutes buffer
      const now = new Date();
      const currentTimeInMinutes = now.getHours() * 60 + now.getMinutes();
      const minimumBookingTime = currentTimeInMinutes + 30;

      slots.forEach((slot) => {
        const timeButton = document.createElement("button");
        const isBooked = bookedSlots.includes(slot);

        // Check if slot is in the past or too close to current time (only for today)
        const slotTimeInMinutes = timeToMinutes(slot);
        const isPastOrTooClose =
          isToday && slotTimeInMinutes < minimumBookingTime;

        const isUnavailable = isBooked || isPastOrTooClose;

        timeButton.className = `time-slot p-3 text-center border border-gray-200 rounded-lg font-medium ${isUnavailable ? "booked" : "hover:bg-blue-50 hover:border-blue-300"
          }`;
        timeButton.textContent = slot;
        timeButton.disabled = isUnavailable;

        if (isBooked) {
          timeButton.innerHTML =
            slot + '<div class="text-xs mt-1">Booked</div>';
        } else if (isPastOrTooClose) {
          timeButton.innerHTML =
            slot + '<div class="text-xs mt-1">Unavailable</div>';
        }

        if (!isUnavailable) {
          timeButton.addEventListener("click", () =>
            selectTime(slot, timeButton)
          );
        }

        timeSlots.appendChild(timeButton);
      });
    }

    function selectDate(date, button) {
      // Remove previous selection
      document.querySelectorAll("#dateGrid button").forEach((btn) => {
        btn.classList.remove("bg-gray-800", "text-white", "border-gray-800");
        btn.classList.add("bg-white", "text-gray-800", "border-gray-200");
        // Reset text colors for individual elements
        const dayElements = btn.querySelectorAll("div");
        dayElements.forEach((el) => {
          el.classList.remove("text-white", "text-gray-200");
          if (el.classList.contains("text-lg")) {
            el.classList.add("text-gray-800");
          } else {
            el.classList.add("text-gray-500");
          }
        });
      });

      // Add selection to clicked button with inverted colors
      button.classList.remove("bg-white", "text-gray-800", "border-gray-200");
      button.classList.add("bg-gray-800", "text-white", "border-gray-800");

      // Invert text colors for selected button
      const dayElements = button.querySelectorAll("div");
      dayElements.forEach((el) => {
        el.classList.remove("text-gray-500", "text-gray-800");
        if (el.classList.contains("text-lg")) {
          el.classList.add("text-white");
        } else {
          el.classList.add("text-gray-200");
        }
      });

      selectedDate = date.toLocaleDateString("en-US", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      });

      selectedDateKey = date.toDateString();
      selectedTime = null; // Reset time selection when date changes

      // Regenerate time slots for the selected date
      fetchBookedSlots(selectedDateKey);

      updateSummary();
    }

    function selectTime(time, button) {
      // Remove previous selection
      document.querySelectorAll(".time-slot").forEach((btn) => {
        btn.classList.remove("selected");
      });

      // Add selection to clicked button
      button.classList.add("selected");
      selectedTime = time;

      updateSummary();
    }

    function updateSummary() {
      const summary = document.getElementById("appointmentSummary");
      const bookButton = document.getElementById("bookButton");

      if (selectedDate && selectedTime) {
        document.getElementById("selectedDate").textContent = selectedDate;
        document.getElementById("selectedTime").textContent = selectedTime;
        summary.classList.remove("hidden");
        bookButton.disabled = false;
      } else {
        summary.classList.add("hidden");
        bookButton.disabled = true;
      }
    }

    // Book appointment
   document.getElementById("bookButton").addEventListener("click", async function () {
  if (selectedDate && selectedTime && selectedDateKey) {
    try {
      // Send POST request to backend to save slot
      const response = await fetch("/api/book-slot", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          date: selectedDateKey,
          time: selectedTime,
          doctorId,     
          userId  
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to book slot");
      }

      // Fetch updated slots from DB
      await fetchBookedSlots(selectedDateKey);

      // Show success
      const successMessage = document.getElementById("successMessage");
      successMessage.classList.remove("hidden");
      document.getElementById("appointmentSummary").classList.add("hidden");
      document.getElementById("bookButton").disabled = true;
      selectedTime = null;

      successMessage.scrollIntoView({ behavior: "smooth" });

      setTimeout(() => {
        successMessage.classList.add("hidden");
      }, 5000);

    } catch (err) {
      alert("Booking failed. Try again.");
      console.error(err);
    }
  }
});

    
    generateDates();

  
    // Profile dropdown functionality
        const profileDropdown = document.getElementById('profileDropdown');
        const profileMenu = document.getElementById('profileMenu');

        function toggleProfileMenu() {
            profileMenu.classList.toggle('hidden');
        }

        function closeProfileMenu() {
            profileMenu.classList.add('hidden');
        }

        // Event listeners
        profileDropdown.addEventListener('click', function (e) {
            e.stopPropagation();
            toggleProfileMenu();
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function (e) {
            if (!profileDropdown.contains(e.target) && !profileMenu.contains(e.target)) {
                closeProfileMenu();
            }
        });


  </script>
</body>

</html>